// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`App Router tests Should show login if user is not authenticated 1`] = `
<DarkThemeProvider>
  <MemoryRouter>
    <Router
      location={
        Object {
          "hash": "",
          "key": "adpivsks",
          "pathname": "/dashboard/home",
          "search": "",
          "state": null,
        }
      }
      navigationType="PUSH"
      navigator={
        Object {
          "action": "PUSH",
          "createHref": [Function],
          "createURL": [Function],
          "encodeLocation": [Function],
          "go": [Function],
          "index": 1,
          "listen": [Function],
          "location": Object {
            "hash": "",
            "key": "adpivsks",
            "pathname": "/dashboard/home",
            "search": "",
            "state": null,
          },
          "push": [Function],
          "replace": [Function],
        }
      }
    >
      <AppRouter>
        <Routes>
          <RenderedRoute
            match={
              Object {
                "params": Object {
                  "*": "home",
                },
                "pathname": "/",
                "pathnameBase": "/",
                "route": Object {
                  "Component": undefined,
                  "ErrorBoundary": undefined,
                  "action": undefined,
                  "caseSensitive": undefined,
                  "children": Array [
                    Object {
                      "Component": undefined,
                      "ErrorBoundary": undefined,
                      "action": undefined,
                      "caseSensitive": undefined,
                      "element": <PrivateRoute>
                        <DashBoardRoutes />
                      </PrivateRoute>,
                      "errorElement": undefined,
                      "handle": undefined,
                      "hasErrorBoundary": false,
                      "id": "1-0",
                      "index": undefined,
                      "lazy": undefined,
                      "loader": undefined,
                      "path": "/dashboard/*",
                      "shouldRevalidate": undefined,
                    },
                  ],
                  "element": undefined,
                  "errorElement": undefined,
                  "handle": undefined,
                  "hasErrorBoundary": false,
                  "id": "1",
                  "index": undefined,
                  "lazy": undefined,
                  "loader": undefined,
                  "path": undefined,
                  "shouldRevalidate": undefined,
                },
              }
            }
            routeContext={
              Object {
                "isDataRoute": false,
                "matches": Array [
                  Object {
                    "params": Object {
                      "*": "home",
                    },
                    "pathname": "/",
                    "pathnameBase": "/",
                    "route": Object {
                      "Component": undefined,
                      "ErrorBoundary": undefined,
                      "action": undefined,
                      "caseSensitive": undefined,
                      "children": Array [
                        Object {
                          "Component": undefined,
                          "ErrorBoundary": undefined,
                          "action": undefined,
                          "caseSensitive": undefined,
                          "element": <PrivateRoute>
                            <DashBoardRoutes />
                          </PrivateRoute>,
                          "errorElement": undefined,
                          "handle": undefined,
                          "hasErrorBoundary": false,
                          "id": "1-0",
                          "index": undefined,
                          "lazy": undefined,
                          "loader": undefined,
                          "path": "/dashboard/*",
                          "shouldRevalidate": undefined,
                        },
                      ],
                      "element": undefined,
                      "errorElement": undefined,
                      "handle": undefined,
                      "hasErrorBoundary": false,
                      "id": "1",
                      "index": undefined,
                      "lazy": undefined,
                      "loader": undefined,
                      "path": undefined,
                      "shouldRevalidate": undefined,
                    },
                  },
                ],
                "outlet": <RenderedRoute
                  match={
                    Object {
                      "params": Object {
                        "*": "home",
                      },
                      "pathname": "/dashboard/home",
                      "pathnameBase": "/dashboard",
                      "route": Object {
                        "Component": undefined,
                        "ErrorBoundary": undefined,
                        "action": undefined,
                        "caseSensitive": undefined,
                        "element": <PrivateRoute>
                          <DashBoardRoutes />
                        </PrivateRoute>,
                        "errorElement": undefined,
                        "handle": undefined,
                        "hasErrorBoundary": false,
                        "id": "1-0",
                        "index": undefined,
                        "lazy": undefined,
                        "loader": undefined,
                        "path": "/dashboard/*",
                        "shouldRevalidate": undefined,
                      },
                    }
                  }
                  routeContext={
                    Object {
                      "isDataRoute": false,
                      "matches": Array [
                        Object {
                          "params": Object {
                            "*": "home",
                          },
                          "pathname": "/",
                          "pathnameBase": "/",
                          "route": Object {
                            "Component": undefined,
                            "ErrorBoundary": undefined,
                            "action": undefined,
                            "caseSensitive": undefined,
                            "children": Array [
                              Object {
                                "Component": undefined,
                                "ErrorBoundary": undefined,
                                "action": undefined,
                                "caseSensitive": undefined,
                                "element": <PrivateRoute>
                                  <DashBoardRoutes />
                                </PrivateRoute>,
                                "errorElement": undefined,
                                "handle": undefined,
                                "hasErrorBoundary": false,
                                "id": "1-0",
                                "index": undefined,
                                "lazy": undefined,
                                "loader": undefined,
                                "path": "/dashboard/*",
                                "shouldRevalidate": undefined,
                              },
                            ],
                            "element": undefined,
                            "errorElement": undefined,
                            "handle": undefined,
                            "hasErrorBoundary": false,
                            "id": "1",
                            "index": undefined,
                            "lazy": undefined,
                            "loader": undefined,
                            "path": undefined,
                            "shouldRevalidate": undefined,
                          },
                        },
                        Object {
                          "params": Object {
                            "*": "home",
                          },
                          "pathname": "/dashboard/home",
                          "pathnameBase": "/dashboard",
                          "route": Object {
                            "Component": undefined,
                            "ErrorBoundary": undefined,
                            "action": undefined,
                            "caseSensitive": undefined,
                            "element": <PrivateRoute>
                              <DashBoardRoutes />
                            </PrivateRoute>,
                            "errorElement": undefined,
                            "handle": undefined,
                            "hasErrorBoundary": false,
                            "id": "1-0",
                            "index": undefined,
                            "lazy": undefined,
                            "loader": undefined,
                            "path": "/dashboard/*",
                            "shouldRevalidate": undefined,
                          },
                        },
                      ],
                      "outlet": null,
                    }
                  }
                >
                  <PrivateRoute>
                    <DashBoardRoutes />
                  </PrivateRoute>
                </RenderedRoute>,
              }
            }
          >
            <RenderedRoute
              match={
                Object {
                  "params": Object {
                    "*": "home",
                  },
                  "pathname": "/dashboard/home",
                  "pathnameBase": "/dashboard",
                  "route": Object {
                    "Component": undefined,
                    "ErrorBoundary": undefined,
                    "action": undefined,
                    "caseSensitive": undefined,
                    "element": <PrivateRoute>
                      <DashBoardRoutes />
                    </PrivateRoute>,
                    "errorElement": undefined,
                    "handle": undefined,
                    "hasErrorBoundary": false,
                    "id": "1-0",
                    "index": undefined,
                    "lazy": undefined,
                    "loader": undefined,
                    "path": "/dashboard/*",
                    "shouldRevalidate": undefined,
                  },
                }
              }
              routeContext={
                Object {
                  "isDataRoute": false,
                  "matches": Array [
                    Object {
                      "params": Object {
                        "*": "home",
                      },
                      "pathname": "/",
                      "pathnameBase": "/",
                      "route": Object {
                        "Component": undefined,
                        "ErrorBoundary": undefined,
                        "action": undefined,
                        "caseSensitive": undefined,
                        "children": Array [
                          Object {
                            "Component": undefined,
                            "ErrorBoundary": undefined,
                            "action": undefined,
                            "caseSensitive": undefined,
                            "element": <PrivateRoute>
                              <DashBoardRoutes />
                            </PrivateRoute>,
                            "errorElement": undefined,
                            "handle": undefined,
                            "hasErrorBoundary": false,
                            "id": "1-0",
                            "index": undefined,
                            "lazy": undefined,
                            "loader": undefined,
                            "path": "/dashboard/*",
                            "shouldRevalidate": undefined,
                          },
                        ],
                        "element": undefined,
                        "errorElement": undefined,
                        "handle": undefined,
                        "hasErrorBoundary": false,
                        "id": "1",
                        "index": undefined,
                        "lazy": undefined,
                        "loader": undefined,
                        "path": undefined,
                        "shouldRevalidate": undefined,
                      },
                    },
                    Object {
                      "params": Object {
                        "*": "home",
                      },
                      "pathname": "/dashboard/home",
                      "pathnameBase": "/dashboard",
                      "route": Object {
                        "Component": undefined,
                        "ErrorBoundary": undefined,
                        "action": undefined,
                        "caseSensitive": undefined,
                        "element": <PrivateRoute>
                          <DashBoardRoutes />
                        </PrivateRoute>,
                        "errorElement": undefined,
                        "handle": undefined,
                        "hasErrorBoundary": false,
                        "id": "1-0",
                        "index": undefined,
                        "lazy": undefined,
                        "loader": undefined,
                        "path": "/dashboard/*",
                        "shouldRevalidate": undefined,
                      },
                    },
                  ],
                  "outlet": null,
                }
              }
            >
              <PrivateRoute>
                <DashBoardRoutes>
                  <NavBar>
                    <DisclosureFn
                      as="nav"
                      className="bg-white dark:bg-gray-900 dark:text-white"
                    >
                      <OpenClosedProvider
                        value={2}
                      >
                        <nav
                          className="bg-white dark:bg-gray-900 dark:text-white"
                          data-headlessui-state=""
                        >
                          <div
                            className="px-2"
                          >
                            <div
                              className="relative flex h-16 items-center justify-between"
                            >
                              <div
                                className="absolute inset-y-0 left-0 flex items-center sm:hidden"
                              >
                                <ButtonFn2
                                  className="inline-flex items-center justify-center rounded-md p-2 text-black dark:hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
                                >
                                  <button
                                    aria-expanded={false}
                                    className="inline-flex items-center justify-center rounded-md p-2 text-black dark:hover:bg-black hover:text-white focus:outline-none focus:ring-2 focus:ring-inset focus:ring-white"
                                    data-headlessui-state=""
                                    id="headlessui-disclosure-button-:r0:"
                                    onClick={[Function]}
                                    onKeyDown={[Function]}
                                    onKeyUp={[Function]}
                                    type="button"
                                  >
                                    <span
                                      className="sr-only"
                                    >
                                      Open main menu
                                    </span>
                                    <ForwardRef(Bars3Icon)
                                      aria-hidden="true"
                                      className="block h-6 w-6 dark:text-white"
                                    >
                                      <svg
                                        aria-hidden="true"
                                        className="block h-6 w-6 dark:text-white"
                                        fill="none"
                                        stroke="currentColor"
                                        strokeWidth={1.5}
                                        viewBox="0 0 24 24"
                                        xmlns="http://www.w3.org/2000/svg"
                                      >
                                        <path
                                          d="M3.75 6.75h16.5M3.75 12h16.5m-16.5 5.25h16.5"
                                          strokeLinecap="round"
                                          strokeLinejoin="round"
                                        />
                                      </svg>
                                    </ForwardRef(Bars3Icon)>
                                  </button>
                                </ButtonFn2>
                              </div>
                              <div
                                className="flex flex-1 items-center justify-center sm:items-stretch sm:justify-start"
                              >
                                <div
                                  className="text-black self-center text-2xl font-medium dark:text-white"
                                >
                                  Wiki
                                  <span
                                    className="text-cyan-500 dark:text-cyan-300"
                                  >
                                    Heroes
                                  </span>
                                </div>
                                <div
                                  className="absolute right-0 sm:hidden"
                                >
                                  <label
                                    className="toggleDarkBtn border border-cyan-300 rounded-full"
                                  >
                                    <input
                                      onClick={[Function]}
                                      type="checkbox"
                                    />
                                    <span
                                      className="slideBtnTg round"
                                    />
                                  </label>
                                </div>
                                <div
                                  className="hidden sm:ml-6 sm:block"
                                >
                                  <div
                                    className="flex space-x-4 items-center justify-between"
                                  >
                                    <NavLink
                                      className={[Function]}
                                      key="Home"
                                      to="/dashboard/home"
                                    >
                                      <Link
                                        aria-current="page"
                                        className="bg-cyan-300 text-gray-900 block rounded-md px-3 py-2 text-base font-medium"
                                        to="/dashboard/home"
                                      >
                                        <a
                                          aria-current="page"
                                          className="bg-cyan-300 text-gray-900 block rounded-md px-3 py-2 text-base font-medium"
                                          href="/dashboard/home"
                                          onClick={[Function]}
                                        >
                                          Home
                                        </a>
                                      </Link>
                                    </NavLink>
                                    <NavLink
                                      className={[Function]}
                                      key="Marvel"
                                      to="/dashboard/marvel"
                                    >
                                      <Link
                                        className="text-gray-900 hover:bg-cyan-300 dark:text-white dark:hover:bg-cyan-300 dark:hover:text-gray-900 block rounded-md px-3 py-2 text-base font-medium"
                                        to="/dashboard/marvel"
                                      >
                                        <a
                                          className="text-gray-900 hover:bg-cyan-300 dark:text-white dark:hover:bg-cyan-300 dark:hover:text-gray-900 block rounded-md px-3 py-2 text-base font-medium"
                                          href="/dashboard/marvel"
                                          onClick={[Function]}
                                        >
                                          Marvel
                                        </a>
                                      </Link>
                                    </NavLink>
                                    <NavLink
                                      className={[Function]}
                                      key="DC"
                                      to="/dashboard/dc"
                                    >
                                      <Link
                                        className="text-gray-900 hover:bg-cyan-300 dark:text-white dark:hover:bg-cyan-300 dark:hover:text-gray-900 block rounded-md px-3 py-2 text-base font-medium"
                                        to="/dashboard/dc"
                                      >
                                        <a
                                          className="text-gray-900 hover:bg-cyan-300 dark:text-white dark:hover:bg-cyan-300 dark:hover:text-gray-900 block rounded-md px-3 py-2 text-base font-medium"
                                          href="/dashboard/dc"
                                          onClick={[Function]}
                                        >
                                          DC
                                        </a>
                                      </Link>
                                    </NavLink>
                                    <NavLink
                                      className={[Function]}
                                      key="Search"
                                      to="/dashboard/search"
                                    >
                                      <Link
                                        className="text-gray-900 hover:bg-cyan-300 dark:text-white dark:hover:bg-cyan-300 dark:hover:text-gray-900 block rounded-md px-3 py-2 text-base font-medium"
                                        to="/dashboard/search"
                                      >
                                        <a
                                          className="text-gray-900 hover:bg-cyan-300 dark:text-white dark:hover:bg-cyan-300 dark:hover:text-gray-900 block rounded-md px-3 py-2 text-base font-medium"
                                          href="/dashboard/search"
                                          onClick={[Function]}
                                        >
                                          Search
                                        </a>
                                      </Link>
                                    </NavLink>
                                    <div
                                      className="justify-self-end"
                                    >
                                      <label
                                        className="toggleDarkBtn"
                                      >
                                        <input
                                          onClick={[Function]}
                                          type="checkbox"
                                        />
                                        <span
                                          className="slideBtnTg round"
                                        />
                                        <span
                                          className="slideBtnMoon"
                                        />
                                      </label>
                                    </div>
                                    <button
                                      className="transition ease-in-out hover:scale-105 hover:bg-cyan-500 hover:text-white cursor-pointer px-3 py-2  text-sm font-medium  rounded bg-cyan-300 text-black justify-self-end absolute right-0"
                                      onClick={[Function]}
                                    >
                                      Logout
                                    </button>
                                  </div>
                                </div>
                              </div>
                              <div
                                className="absolute inset-y-0 right-0 flex items-center pr-2 sm:static sm:inset-auto sm:ml-6 sm:pr-0"
                              />
                            </div>
                          </div>
                          <PanelFn2
                            className="sm:hidden"
                          />
                        </nav>
                      </OpenClosedProvider>
                    </DisclosureFn>
                  </NavBar>
                  <div
                    className="px-5 h-full"
                  >
                    <Routes>
                      <RenderedRoute
                        match={
                          Object {
                            "params": Object {
                              "*": "home",
                            },
                            "pathname": "/dashboard/home",
                            "pathnameBase": "/dashboard/home",
                            "route": Object {
                              "Component": undefined,
                              "ErrorBoundary": undefined,
                              "action": undefined,
                              "caseSensitive": undefined,
                              "element": <HomeScreen />,
                              "errorElement": undefined,
                              "handle": undefined,
                              "hasErrorBoundary": false,
                              "id": "0",
                              "index": undefined,
                              "lazy": undefined,
                              "loader": undefined,
                              "path": "home",
                              "shouldRevalidate": undefined,
                            },
                          }
                        }
                        routeContext={
                          Object {
                            "isDataRoute": false,
                            "matches": Array [
                              Object {
                                "params": Object {
                                  "*": "home",
                                },
                                "pathname": "/",
                                "pathnameBase": "/",
                                "route": Object {
                                  "Component": undefined,
                                  "ErrorBoundary": undefined,
                                  "action": undefined,
                                  "caseSensitive": undefined,
                                  "children": Array [
                                    Object {
                                      "Component": undefined,
                                      "ErrorBoundary": undefined,
                                      "action": undefined,
                                      "caseSensitive": undefined,
                                      "element": <PrivateRoute>
                                        <DashBoardRoutes />
                                      </PrivateRoute>,
                                      "errorElement": undefined,
                                      "handle": undefined,
                                      "hasErrorBoundary": false,
                                      "id": "1-0",
                                      "index": undefined,
                                      "lazy": undefined,
                                      "loader": undefined,
                                      "path": "/dashboard/*",
                                      "shouldRevalidate": undefined,
                                    },
                                  ],
                                  "element": undefined,
                                  "errorElement": undefined,
                                  "handle": undefined,
                                  "hasErrorBoundary": false,
                                  "id": "1",
                                  "index": undefined,
                                  "lazy": undefined,
                                  "loader": undefined,
                                  "path": undefined,
                                  "shouldRevalidate": undefined,
                                },
                              },
                              Object {
                                "params": Object {
                                  "*": "home",
                                },
                                "pathname": "/dashboard/home",
                                "pathnameBase": "/dashboard",
                                "route": Object {
                                  "Component": undefined,
                                  "ErrorBoundary": undefined,
                                  "action": undefined,
                                  "caseSensitive": undefined,
                                  "element": <PrivateRoute>
                                    <DashBoardRoutes />
                                  </PrivateRoute>,
                                  "errorElement": undefined,
                                  "handle": undefined,
                                  "hasErrorBoundary": false,
                                  "id": "1-0",
                                  "index": undefined,
                                  "lazy": undefined,
                                  "loader": undefined,
                                  "path": "/dashboard/*",
                                  "shouldRevalidate": undefined,
                                },
                              },
                              Object {
                                "params": Object {
                                  "*": "home",
                                },
                                "pathname": "/dashboard/home",
                                "pathnameBase": "/dashboard/home",
                                "route": Object {
                                  "Component": undefined,
                                  "ErrorBoundary": undefined,
                                  "action": undefined,
                                  "caseSensitive": undefined,
                                  "element": <HomeScreen />,
                                  "errorElement": undefined,
                                  "handle": undefined,
                                  "hasErrorBoundary": false,
                                  "id": "0",
                                  "index": undefined,
                                  "lazy": undefined,
                                  "loader": undefined,
                                  "path": "home",
                                  "shouldRevalidate": undefined,
                                },
                              },
                            ],
                            "outlet": null,
                          }
                        }
                      >
                        <HomeScreen>
                          <div
                            className="h-screen sm:px-10 sm:py-5 animate__animated animate__fadeIn"
                          >
                            <div>
                              <h1
                                className="text-2xl"
                              >
                                Welcome
                                <span
                                  className="text-cyan-400 dark:text-cyan-300 font-bold"
                                >
                                  !
                                </span>
                              </h1>
                            </div>
                            <div
                              className="mt-3"
                            >
                              <p>
                                WikiHeroes is a community where you can find any information about Heroes. Discover, share and enjoy interesting information about your favorites heroes.
                              </p>
                            </div>
                            <div>
                              <p
                                className="text-xl text-center m-3 font-medium underline underline-offset-4"
                              >
                                Hero of the week!
                              </p>
                            </div>
                            <HeroCard
                              alter_ego="Peter Parker"
                              characters="Peter Parker"
                              first_appearance="Amazing Fantasy #15"
                              id="marvel-spider"
                              publisher="Marvel Comics"
                              superhero="Spider Man"
                            >
                              <div
                                className="flex-col sm:flex-row border-cyan-500 border-opacity-20 rounded-md animate__animated animate__fadeIn flex w-full shadow-lg  px-3 py-5 dark:bg-gray-900 dark:shadow-none border-0 dark:border"
                              >
                                <img
                                  alt="..."
                                  className="w-auto h-52 object-contain"
                                  src="/assets/marvel-spider.jpg"
                                />
                                <div
                                  className="ms-4 flex flex-col relative"
                                >
                                  <p
                                    className="text-gray-950 dark:text-cyan-300 text-xl"
                                  >
                                    Spider Man
                                  </p>
                                  <p>
                                    Amazing Fantasy #15
                                  </p>
                                  <Link
                                    className="mt-3 sm:absolute bottom-0 row-span-1 w-20 px-3 py-1 rounded text-center bg-cyan-300 text-gray-950 hover:bg-cyan-500 transition ease-in-out hover:scale-105 hover:text-white"
                                    to="/dashboard/hero/marvel-spider"
                                  >
                                    <a
                                      className="mt-3 sm:absolute bottom-0 row-span-1 w-20 px-3 py-1 rounded text-center bg-cyan-300 text-gray-950 hover:bg-cyan-500 transition ease-in-out hover:scale-105 hover:text-white"
                                      href="/dashboard/hero/marvel-spider"
                                      onClick={[Function]}
                                    >
                                      More...
                                    </a>
                                  </Link>
                                </div>
                              </div>
                            </HeroCard>
                          </div>
                        </HomeScreen>
                      </RenderedRoute>
                    </Routes>
                  </div>
                </DashBoardRoutes>
              </PrivateRoute>
            </RenderedRoute>
          </RenderedRoute>
        </Routes>
      </AppRouter>
    </Router>
  </MemoryRouter>
</DarkThemeProvider>
`;
